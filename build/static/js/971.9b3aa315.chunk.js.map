{"version":3,"file":"static/js/971.9b3aa315.chunk.js","mappings":"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","sources":["Images/img/avatar.svg","ATOMIC/atoms/card/Card.jsx","ATOMIC/atoms/container/Container.jsx","ATOMIC/atoms/input/Input.jsx","../node_modules/@mui/icons-material/esm/NavigateBeforeOutlined.js","../node_modules/@mui/icons-material/esm/NavigateNextOutlined.js","ATOMIC/molecules/datatable/Pagination.jsx","ATOMIC/molecules/modal/Modal.jsx","ATOMIC/organisms/InputTab.jsx","ATOMIC/templates/Layout.jsx","ATOMIC/organisms/clients/ClientCardTab.jsx","ATOMIC/organisms/clients/ClientsTable.jsx","UI/manageClients/ManageClients.jsx"],"sourcesContent":["var _g, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgAvatar(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 512,\n    height: 512,\n    viewBox: \"0 0 512 512\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_1765_7055)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0H512V512H0V0Z\",\n    fill: \"#222D3A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M330.085 110.955C311.299 90.672 285.059 79.5024 256.097 79.5024C226.981 79.5024 200.655 90.6044 181.955 110.762C163.053 131.141 153.843 158.838 156.005 188.746C160.292 247.751 205.192 295.75 256.097 295.75C307.003 295.75 351.826 247.76 356.18 188.765C358.371 159.128 349.103 131.489 330.085 110.955Z\",\n    fill: \"#B3BAC0\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M53.9275 511.997H458.333C459 503 458.206 483.499 456.333 473.141C448.185 427.941 422.757 389.972 382.789 363.327C347.282 339.675 302.305 326.642 256.13 326.642C209.956 326.642 164.978 339.666 129.471 363.327C89.5038 389.982 64.0754 427.951 55.9275 473.15C54.0546 483.509 53.5001 504.5 53.9275 511.997Z\",\n    fill: \"#B3BAC0\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_1765_7055\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 512,\n    height: 512,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgAvatar);\nexport default __webpack_public_path__ + \"static/media/avatar.8281e2617447743e5756c9ffb0e8da2d.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from \"clsx\";\r\nimport \"./cardStyle.scss\";\r\n\r\nlet style = \"default\";\r\n\r\nconst Card = ({  children, className, variant }) => {\r\n  switch (variant) {\r\n    case \"fill_light_green\":\r\n      className = clsx(style, \"card-light-green\");\r\n      break;\r\n    case \"fill_light_green-md\":\r\n      className = clsx(style, \"card-light-green_md\");\r\n      break;\r\n    case \"fill_red\":\r\n      className = clsx(style, \"card-red\");\r\n      break;\r\n    case \"fill_red-md\":\r\n      className = clsx(style, \"card-red_md\");\r\n      break;\r\n    case \"fill_black\":\r\n      className = clsx(style, \"card-black\");\r\n      break;\r\n    case \"full_width\":\r\n      className = \"full_width\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      variant={variant}\r\n      className={clsx(style, className)}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./containerStyle.scss\";\r\n\r\nconst Container = ({ variant, children, className }) => {\r\n  switch (variant) {\r\n    case \"flexFit\":\r\n      className = \"flex-fit\";\r\n      break;\r\n    case \"flexed\":\r\n      className = \"flex-bw\";\r\n      break;\r\n    case \"normal\":\r\n      className = \"container\";\r\n      break;\r\n    case \"container_fit\":\r\n      className = \"container_fit\";\r\n      break;\r\n    case \"gapped\":\r\n      className = \"gapped\";\r\n      break;\r\n    case \"gapped-spaced\":\r\n      className = \"nav-flex-bw\";\r\n      break;\r\n    case \"gapped-top\":\r\n      className = \"gapped-top\";\r\n      break;\r\n    case \"gapped-top-center\":\r\n      className = \"gapped-top-center\";\r\n      break;\r\n    case \"flex-around\":\r\n      className = \"flex-around\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <main className={className} variant={variant}>\r\n      {children}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./inputStyle.scss\";\r\n\r\nconst Input = ({\r\n  onChange = (e) => null,\r\n  type = \"\",\r\n  className,\r\n  name,\r\n  checked,\r\n  placeholder = \"\",\r\n  variant,\r\n  max,\r\n  value,\r\n}) => {\r\n  switch (variant) {\r\n    case \"normal\":\r\n      className = \"input\";\r\n      break;\r\n    case \"checkbox\":\r\n      className = \"checkbox\";\r\n      break;\r\n    case \"number\":\r\n      className = \"number\";\r\n      break;\r\n    case \"search\":\r\n      className = \"search\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <input\r\n      placeholder={placeholder}\r\n      name={name}\r\n      type={type}\r\n      value={value}\r\n      max={max}\r\n      checked={checked}\r\n      onChange={onChange}\r\n      className={className}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.61 7.41 14.2 6l-6 6 6 6 1.41-1.41L11.03 12l4.58-4.59z\"\n}), 'NavigateBeforeOutlined');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10.02 6 8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z\"\n}), 'NavigateNextOutlined');","import React from \"react\";\r\nimport Button from \"../../atoms/button/Button\";\r\nimport Container from \"../../atoms/container/Container\";\r\nimport './pagination.scss'\r\nimport { NavigateBeforeOutlined, NavigateNextOutlined } from \"@mui/icons-material\";\r\n\r\nconst Pagination = ({\r\n  currentPage,\r\n  totalPages,\r\n  onPageChange,\r\n  handleNextClick,\r\n  handlePrevClick,\r\n}) => {\r\n\r\n  const pages = Array.from({ length: totalPages }, (_, i) => i + 1);\r\n\r\n  const handlePageClick = (page) => {\r\n    if (page < 1 || page > totalPages || page === currentPage) {\r\n      return;\r\n    }\r\n    onPageChange(page);\r\n  };\r\n\r\n  const renderPageButtons = () => {\r\n    let pageButtons = [];\r\n    if (totalPages <= 5) {\r\n      pageButtons = pages;\r\n    } else if (currentPage <= 3) {\r\n      pageButtons = pages.slice(0, 5);\r\n    } else if (currentPage > totalPages - 3) {\r\n      pageButtons = pages.slice(totalPages - 5, totalPages);\r\n    } else {\r\n      pageButtons = pages.slice(currentPage - 3, currentPage + 2);\r\n    }\r\n    return pageButtons.map((page) => (\r\n      <button\r\n        key={page}\r\n        className={`Pagination__button ${\r\n          page === currentPage ? \"Pagination__button--active\" : \"\"\r\n        }`}\r\n        onClick={() => handlePageClick(page)}\r\n      >\r\n        {page}\r\n      </button>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Container className=\"Pagination\">\r\n      <Button\r\n        className=\"Pagination__button Pagination__button--arrow\"\r\n        onClick={handlePrevClick}\r\n        disabled={currentPage <= 1}\r\n      >\r\n      <NavigateBeforeOutlined/>\r\n      </Button>\r\n      {renderPageButtons()}\r\n      <Button\r\n        className=\"Pagination__button Pagination__button--arrow\"\r\n        onClick={handleNextClick}\r\n        disabled={currentPage >= totalPages}\r\n      >\r\n       <NavigateNextOutlined/>\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport './modal.scss'\r\n\r\nconst Modal = ({ isOpen, onClose, children }) => {\r\n    const [isVisible, setIsVisible] = useState(isOpen);\r\n\r\n  const handleClose = () => {\r\n    setIsVisible(false);\r\n    onClose();\r\n  };\r\n  \r\n  return (\r\n    // className={isModalOpen ? \"modal-overlay\" : \"modal-hiden\"}\r\n    <div className={isOpen ? \"modal-overlay \": \"modal-hiden\"}>\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n\r\n\r\n","import React from \"react\";\r\nimport Input from \"../atoms/input/Input\";\r\nimport Container from \"../atoms/container/Container\";\r\nimport { useState } from \"react\";\r\n\r\nconst InputTab = ({\r\n  pageSize,\r\n  handlePageSizeChange,\r\n  totalRows,\r\n  handleQuery,\r\n}) => {\r\n  return (\r\n    <Container variant=\"gapped-top\">\r\n      <Container variant=\"gapped\">\r\n        <div>Search</div>\r\n        <Input\r\n          variant=\"normal\"\r\n          type=\"text\"\r\n          onChange={handleQuery}\r\n          placeholder=\"Enter name or email\"\r\n        />\r\n      </Container>\r\n      <Container variant=\"gapped\">\r\n        <div>Show</div>\r\n        <Input\r\n          variant=\"number\"\r\n          type=\"number\"\r\n          max={totalRows}\r\n          value={pageSize}\r\n          onChange={handlePageSizeChange}\r\n        />\r\n        <div>entries</div>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InputTab;\r\n","import React from \"react\";\r\nimport './layout.scss'\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <main className=\"layout\">\r\n      <main>{children}</main>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport Card from \"../../atoms/card/Card\";\r\nimport Container from \"../../atoms/container/Container\";\r\n\r\nconst ClientCardTab = ({ client }) => {\r\n  const isVerified = client.filter((item) => item.isVerified);\r\n  const notVerified = client.filter((item) => !item.isVerified);\r\n  const schema = [\r\n    {\r\n      id: 1,\r\n      variant: \"fill_light_green-md\",\r\n      txt_1: isVerified.length,\r\n      desc: \"Verified\",\r\n    },\r\n    {\r\n      id: 2,\r\n      variant: \"fill_red-md\",\r\n      txt_1: notVerified.length,\r\n      desc: \"Not Verified\",\r\n    },\r\n  ];\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <Container variant=\"flexed\">\r\n        {schema.map((item) => {\r\n          const { id, variant, txt_1, desc } = item;\r\n          return (\r\n            <Card key={id} variant={variant}>\r\n              <p>{txt_1}</p>\r\n              <p>{desc}</p>\r\n            </Card>\r\n          );\r\n        })}\r\n      </Container>\r\n      <div>\r\n        <Card variant=\"full_width\">MANAGE CLIENTS</Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientCardTab;\r\n","import React, { useState } from \"react\";\r\nimport InputTab from \"../InputTab\";\r\nimport \"./tableSection.scss\";\r\nimport { v4 } from \"uuid\";\r\nimport Image from \"mui-image\";\r\nimport Button from \"../../atoms/button/Button\";\r\nimport Input from \"../../atoms/input/Input\";\r\nimport { Link } from \"react-router-dom\";\r\nimport avatar from \"../../../Images/img/avatar.svg\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Pagination from \"../../molecules/datatable/Pagination\";\r\nimport { selectClient } from \"../../../redux/clientsRedux\";\r\nimport { userRequest } from \"../../../redux/requestMethod\";\r\nimport Modal from \"../../molecules/modal/Modal\";\r\nimport \"../../molecules/modal/modal.scss\";\r\n\r\nconst ClientsTable = ({ client, isDelete, setIsDelete, handleQuery }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(20);\r\n  const [selectedIds, setSelectedIds] = useState([]);\r\n\r\n  const totalRows = client.length;\r\n  const totalPages = Math.ceil(totalRows / pageSize);\r\n\r\n  const startIndex = (currentPage - 1) * pageSize;\r\n  const endIndex = startIndex + pageSize;\r\n\r\n  const handleDelete = async (id) => {\r\n    await userRequest.delete(`/admin/client/${id}`);\r\n    setIsDelete(!isDelete);\r\n  };\r\n\r\n  const reverseClient = [...client].reverse()\r\n  const rowsToDisplay = client.slice(startIndex, endIndex);\r\n\r\n  const handleNextClick = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevClick = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const onPageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const handlePageSizeChange = (newPageSize) => {\r\n    setPageSize(newPageSize);\r\n    setCurrentPage(1);\r\n  };\r\n  const handlePageSizeChangeFromInput = (event) => {\r\n    const newPageSize = parseInt(event.target.value);\r\n    handlePageSizeChange(newPageSize);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const itemId = event.target.value;\r\n    if (event.target.checked) {\r\n      setSelectedIds([...selectedIds, itemId]);\r\n    } else {\r\n      setSelectedIds(selectedIds.filter((id) => id !== itemId));\r\n    }\r\n  };\r\n\r\n  const handleClientClick = () => {\r\n    const randomIndex = Math.floor(Math.random() * rowsToDisplay.length);\r\n    const randomClient = rowsToDisplay[randomIndex];\r\n    const randomId = randomClient._id;\r\n    handleDelete(randomId)\r\n    setIsModalOpen(false);\r\n  }\r\n\r\n  const handleSelectedClient = (id) => {\r\n    dispatch(selectClient(id));\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\r\n        <p className=\"modal-text\">Are you sure you want to delete this user?</p>\r\n        <div className=\"btn-group\">\r\n          <Button variant=\"outlined\" onClick={handleCloseModal}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={handleClientClick}\r\n          >\r\n            delete\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <div>\r\n        <div className=\"table_container\">\r\n          <InputTab\r\n            pageSize={pageSize}\r\n            handlePageSizeChange={handlePageSizeChangeFromInput}\r\n            totalRows={totalRows}\r\n            handleQuery={handleQuery}\r\n          />\r\n          <div className=\"table\">\r\n            <table className=\"data-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Picture</th>\r\n                  <th style={{ width: \"150px\" }}>Location</th>\r\n                  <th style={{ width: \"150px\" }}>Name</th>\r\n                  <th style={{ width: \"150px\" }}>Edit</th>\r\n                  <th style={{ width: \"150px\" }}>Delete</th>\r\n                  <th style={{ width: \"150px\" }}>Select</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {rowsToDisplay !== 0 ? (\r\n                  <>\r\n                    {reverseClient.map((item, i) => {\r\n                      return (\r\n                        <tr key={i}>\r\n                          <td>{i + 1}</td>\r\n                          <td>\r\n                            <div className=\"table_img\">\r\n                              <Image\r\n                                width={100}\r\n                                height={97}\r\n                                src={item.picture ? item.picture : avatar}\r\n                                alt={item.picture}\r\n                              />\r\n                            </div>\r\n                          </td>\r\n                          <td style={{ width: \"150px\", textAlign: \"center\" }}>\r\n                            <div>\r\n                              {item.country && item.state ? (\r\n                                <p>\r\n                                  {item.country}, {item.state}\r\n                                </p>\r\n                              ) : (\r\n                                <span>No Location</span>\r\n                              )}\r\n                            </div>\r\n                          </td>\r\n                          <td style={{ width: \"150px\", textAlign: \"center\" }}>\r\n                            {item.fullName}\r\n                          </td>\r\n                          <td style={{ width: \"150px\", textAlign: \"center\" }}>\r\n                            <Link to={`/adminpage/manage_clients/${item.uuid}`}>\r\n                              <Button\r\n                                variant=\"primary\"\r\n                                onClick={() => handleSelectedClient(item._id)}\r\n                              >\r\n                                Edit\r\n                              </Button>\r\n                            </Link>\r\n                          </td>\r\n                          <td style={{ width: \"150px\", textAlign: \"center\" }}>\r\n                            <Button\r\n                              variant=\"secondary\"\r\n                              onClick={handleOpenModal}\r\n                            >\r\n                              Delete\r\n                            </Button>\r\n                          </td>\r\n                          <td style={{ width: \"150px\", textAlign: \"center\" }}>\r\n                            <label>\r\n                              <Input\r\n                                variant=\"checkbox\"\r\n                                type=\"checkbox\"\r\n                                name={item._id}\r\n                                value={item._id}\r\n                                checked={selectedIds.includes(item._id)}\r\n                                onChange={handleCheckboxChange}\r\n                              />\r\n                            </label>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </>\r\n                ) : (\r\n                  <div>no users yet!</div>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n            {/* <DataTable data={rowsToDisplay} /> */}\r\n          </div>\r\n        </div>\r\n        <Pagination\r\n          currentPage={currentPage}\r\n          totalPages={totalPages}\r\n          onPageChange={onPageChange}\r\n          handlePrevClick={handlePrevClick}\r\n          handleNextClick={handleNextClick}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default ClientsTable;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport Layout from \"../../ATOMIC/templates/Layout\";\r\nimport ClientCardTab from \"../../ATOMIC/organisms/clients/ClientCardTab\";\r\nimport Container from \"../../ATOMIC/atoms/container/Container\";\r\nimport ClientsTable from \"../../ATOMIC/organisms/clients/ClientsTable\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { makeGet } from \"../../redux/apiCalls\";\r\n\r\nconst ManageClients = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [client, setClient] = useState([]);\r\n  const [isDelete, setIsDelete] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleQuery = (e) => {\r\n    setQuery(e.target.value.toLowerCase());\r\n  };\r\n\r\n  const fetchAgency = () => {\r\n    makeGet(dispatch, `/client/clients/?client=${query}`, setClient);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = fetchAgency();\r\n    return () => unsubscribe;\r\n  }, [isDelete, query]);\r\n\r\n  return (\r\n    <Container variant=\"normal\">\r\n      <Container variant=\"container_fit\">\r\n        <Layout>\r\n          <ClientCardTab client={client} />\r\n          <ClientsTable\r\n            client={client}\r\n            isDelete={isDelete}\r\n            setIsDelete={setIsDelete}\r\n            handleQuery={handleQuery}\r\n          />\r\n        </Layout>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ManageClients;\r\n"],"names":["style","_ref","children","className","variant","clsx","_jsx","onChange","e","type","name","checked","placeholder","max","value","createSvgIcon","d","currentPage","totalPages","onPageChange","handleNextClick","handlePrevClick","pages","Array","from","length","_","i","_jsxs","Container","Button","onClick","disabled","NavigateBeforeOutlined","renderPageButtons","pageButtons","slice","map","page","concat","handlePageClick","NavigateNextOutlined","isOpen","onClose","isVisible","setIsVisible","useState","pageSize","handlePageSizeChange","totalRows","handleQuery","Input","client","isVerified","filter","item","notVerified","schema","id","txt_1","desc","Card","isDelete","setIsDelete","isModalOpen","setIsModalOpen","dispatch","useDispatch","setCurrentPage","setPageSize","selectedIds","setSelectedIds","Math","ceil","startIndex","endIndex","reverseClient","reverse","rowsToDisplay","handleCheckboxChange","event","itemId","target","handleOpenModal","handleCloseModal","Modal","handleClientClick","randomIndex","floor","random","async","userRequest","delete","handleDelete","_id","InputTab","newPageSize","parseInt","width","_Fragment","Image","height","src","picture","avatar","alt","textAlign","country","state","fullName","Link","to","uuid","handleSelectedClient","selectClient","includes","Pagination","pageNumber","ManageClients","setClient","query","setQuery","useEffect","unsubscribe","makeGet","Layout","ClientCardTab","ClientsTable","toLowerCase"],"sourceRoot":""}